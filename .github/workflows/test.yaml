name: tests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'
  workflow_dispatch:
  schedule:
    - cron: '0 14 * * SUN'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  pre_commit:
    name: Run pre-commit hooks
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: "1"
      - name: set PY
        run: echo "PY=$(python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit|${{ env.PY }}|${{ hashFiles('.pre-commit-config.yaml') }}
      - name: pre-commit
        uses: pre-commit/action@v3.0.0
  test_suite:
    name: Pytest on ${{ matrix.python-version }}, Bokeh ${{ matrix.bokeh-version }}, ${{ matrix.os }}
    needs: [pre_commit]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        python-version: ['3.8', '3.11']
        bokeh-version: ['2', '3']
    timeout-minutes: 120
    defaults:
      run:
        shell: bash -el {0}
    env:
      DESC: "Python ${{ matrix.python-version }} - Bokeh ${{ matrix.bokeh-version }} tests"
      PYTHON_VERSION: ${{ matrix.python-version }}
      SETUPTOOLS_ENABLE_FEATURES: "legacy-editable"
      DISPLAY: ":99.0"
      PYTHONIOENCODING: "utf-8"
      MPLBACKEND: "Agg"
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      OMP_NUM_THREADS: 1
      OPENBLAS_NUM_THREADS: 1
      MKL_NUM_THREADS: 1
      VECLIB_MAXIMUM_THREADS: 1
      NUMEXPR_NUM_THREADS: 1
      NUMBA_NUM_THREADS: 1
      PYDEVD_DISABLE_FILE_VALIDATION: 1
    steps:
      - uses: holoviz-dev/holoviz_tasks/install@v0.1a15
        with:
          name: unit_test_suite_bokeh${{ matrix.bokeh-version }}
          python-version: ${{ matrix.python-version }}
          channel-priority: strict
          channels: pyviz/label/dev,conda-forge,nodefaults
          envs: "-o flakes -o tests -o examples_tests -o bokeh${{ matrix.bokeh-version }}"
          cache: true
          conda-update: true
        id: install
      - name: bokeh sampledata
        run: |
          conda activate test-environment
          bokeh sampledata
      - name: doit test_unit
        run: |
          conda activate test-environment
          doit test_unit
      - name: test examples
        run: |
          conda activate test-environment
          mkdir -p ~/.jupyter/
          echo "c.ExecutePreprocessor.startup_timeout=600" >> ~/.jupyter/jupyter_nbconvert_config.py
          doit test_examples
      - name: codecov
        run: |
          conda activate test-environment
          codecov
  ui_test_suite:
    name: UI tests on ${{ matrix.os }} with Python 3.9
    needs: [pre_commit]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest']
    timeout-minutes: 60
    defaults:
      run:
        shell: bash -el {0}
    env:
      DESC: "Python ${{ matrix.python-version }} tests"
      PYTHONIOENCODING: "utf-8"
      PANEL_LOG_LEVEL: info
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SETUPTOOLS_ENABLE_FEATURES: "legacy-editable"
      # Without this env var `doit env_create ...` uses by default
      # the `pyviz` channel, except that we don't want to configure
      # it as one of the sources.
      PYCTDEV_SELF_CHANNEL: "pyviz/label/dev"
    steps:
      - uses: holoviz-dev/holoviz_tasks/install@v0.1a15
        with:
          name: ui_test_suite
          python-version: 3.9
          channels: pyviz/label/dev,bokeh,conda-forge,nodefaults
          envs: "-o recommended -o tests -o build"
          cache: true
          playwright: true
        id: install
      - name: doit env_capture
        run: |
          conda activate test-environment
          doit env_capture
      - name: doit test_ui
        run: |
          conda activate test-environment
          doit test_ui
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: ui-tests
          fail_ci_if_error: false # optional (default = false)
