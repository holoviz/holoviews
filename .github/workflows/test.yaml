name: tests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "*"
  workflow_dispatch:
    inputs:
      target:
        description: "How much of the test suite to run"
        type: choice
        default: default
        options:
          - default
          - full
          - downstream
      cache:
        description: "Use cache"
        type: boolean
        default: true

  schedule:
    - cron: "0 14 * * SUN"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash -el {0}

env:
  DISPLAY: ":99.0"
  PYTHONIOENCODING: "utf-8"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  OMP_NUM_THREADS: 1
  OPENBLAS_NUM_THREADS: 1
  MKL_NUM_THREADS: 1
  VECLIB_MAXIMUM_THREADS: 1
  NUMEXPR_NUM_THREADS: 1
  NUMBA_NUM_THREADS: 1
  PYDEVD_DISABLE_FILE_VALIDATION: 1
  DASK_DATAFRAME__QUERY_PLANNING: false

jobs:
  pre_commit:
    name: Run pre-commit
    runs-on: "ubuntu-latest"
    steps:
      - uses: holoviz-dev/holoviz_tasks/pre-commit@v0

  setup:
    name: Setup workflow
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      code_change: ${{ steps.filter.outputs.code }}
      matrix: ${{ env.MATRIX }}
    steps:
      - uses: actions/checkout@v3
        if: github.event_name != 'pull_request'
      - name: Check for code changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            code:
              - 'holoviews/**'
              - 'examples/**'
              - 'setup.py'
              - 'pyproject.toml'
              - '.github/workflows/test.yaml'
      - name: Set matrix option
        run: |
          if [[ '${{ github.event_name }}' == 'workflow_dispatch' ]]; then
            OPTION=${{ github.event.inputs.target }}
          elif [[ '${{ github.event_name }}' == 'schedule' ]]; then
            OPTION="full"
          elif [[ '${{ github.event_name }}' == 'push' && '${{ github.ref_type }}' == 'tag' ]]; then
            OPTION="full"
          else
            OPTION="default"
          fi
          echo "MATRIX_OPTION=$OPTION" >> $GITHUB_ENV
      - name: Set test matrix with 'default' option
        if: env.MATRIX_OPTION == 'default'
        run: |
          MATRIX=$(jq -nsc '{
              "os": ["ubuntu-latest", "macos-latest", "windows-latest"],
              "environment": ["test-309", "test-312"]
          }')
          echo "MATRIX=$MATRIX" >> $GITHUB_ENV
      - name: Set test matrix with 'full' option
        if: env.MATRIX_OPTION == 'full'
        run: |
          MATRIX=$(jq -nsc '{
              "os": ["ubuntu-latest", "macos-latest", "windows-latest"],
              "environment": ["3.9", "3.10", "3.11", "3.12"]
          }')
          echo "MATRIX=$MATRIX" >> $GITHUB_ENV
      - name: Set test matrix with 'downstream' option
        if: env.MATRIX_OPTION == 'downstream'
        run: |
          MATRIX=$(jq -nsc '{
              "os": ["ubuntu-latest"],
              "environment": ["3.11"]
          }')
          echo "MATRIX=$MATRIX" >> $GITHUB_ENV

  pixi_lock:
    name: Pixi lock
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Set TODAY
        run: echo "TODAY=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
      - name: cache
        if: ${{ github.event.inputs.cache || github.event.inputs.cache == '' }} == 'true'
        id: cache
        uses: actions/cache/restore@v4
        with:
          path: pixi.lock
          key: ${{ hashFiles('pyproject.toml') }}-${{ env.TODAY }}
      - uses: actions/checkout@v4
        if: needs.setup.outputs.code_change == 'true' && steps.cache.outputs.cache-hit != 'true'
        with:
          fetch-depth: "100"
      - name: Fetch
        if: needs.setup.outputs.code_change == 'true' && steps.cache.outputs.cache-hit != 'true'
        run: git fetch --prune --tags -f
      - uses: prefix-dev/setup-pixi@v0.5.1
        if: needs.setup.outputs.code_change == 'true' && steps.cache.outputs.cache-hit != 'true'
        id: install
        with:
          pixi-version: v0.19.0
          manifest-path: pyproject.toml
          environments: ${{ matrix.environment }}
          # cache: ${{ github.event.inputs.cache || github.event.inputs.cache == '' }}
      - uses: actions/upload-artifact@v4
        if: needs.setup.outputs.code_change == 'true'
        with:
          name: pixi-lock
          path: pixi.lock
          if-no-files-found: error
      - if: ${{ github.event.inputs.cache || github.event.inputs.cache == '' }} == 'true' && steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: pixi.lock
          key: ${{ hashFiles('pyproject.toml') }}-${{ env.TODAY }}

  unit_test_suite:
    name: Unit tests on Python ${{ matrix.environment }}, ${{ matrix.os }}
    needs: [pre_commit, setup, pixi_lock]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    timeout-minutes: 120
    env:
      DESC: "Python ${{ matrix.environment }}, ${{ matrix.os }} unit tests"
    steps:
      - uses: actions/checkout@v4
        if: needs.setup.outputs.code_change == 'true'
        with:
          fetch-depth: "100"
      - name: Fetch
        if: needs.setup.outputs.code_change == 'true'
        run: git fetch --prune --tags -f
      - uses: actions/download-artifact@v4
        with:
          name: pixi-lock
          path: .
      - uses: prefix-dev/setup-pixi@v0.5.1
        if: needs.setup.outputs.code_change == 'true'
        id: install
        with:
          pixi-version: v0.19.0
          manifest-path: pyproject.toml
          environments: ${{ matrix.environment }}
          # cache: ${{ github.event.inputs.cache || github.event.inputs.cache == '' }}
      - name: Check packages latest version
        if: needs.setup.outputs.code_change == 'true'
        run: |
          pixi run -e ${{ matrix.environment }} check-latest-packages bokeh panel param datashader
      - name: Download data
        if: needs.setup.outputs.code_change == 'true'
        run: |
          pixi run -e ${{ matrix.environment }} download-data
      - name: Test Unit
        if: needs.setup.outputs.code_change == 'true'
        run: |
          pixi run -e ${{ matrix.environment }} test-unit --cov=./holoviews
      - name: Test Examples
        if: needs.setup.outputs.code_change == 'true'
        run: |
          pixi run -e ${{ matrix.environment }} test-example
      - name: codecov
        if: needs.setup.outputs.code_change == 'true'
        run: |
          pixi run -e ${{ matrix.environment }} codecov

  ui_test_suite:
    name: UI tests on Python ${{ matrix.environment }}, ${{ matrix.os }}
    needs: [pre_commit, setup, pixi_lock]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"]
        environment: ["test-ui"]
    timeout-minutes: 60
    env:
      DESC: "Python ${{ matrix.environment }}, ${{ matrix.os }} UI tests"
      PANEL_LOG_LEVEL: info
    steps:
      - uses: actions/checkout@v4
        if: needs.setup.outputs.code_change == 'true'
        with:
          fetch-depth: "100"
      - name: Fetch
        if: needs.setup.outputs.code_change == 'true'
        run: git fetch --prune --tags -f
      - uses: actions/download-artifact@v4
        with:
          name: pixi-lock
          path: .
      - uses: prefix-dev/setup-pixi@v0.5.1
        if: needs.setup.outputs.code_change == 'true'
        id: install
        with:
          pixi-version: v0.19.0
          manifest-path: pyproject.toml
          environments: ${{ matrix.environment }}
          # cache: ${{ github.event.inputs.cache || github.event.inputs.cache == '' }}
      - name: Download data
        if: needs.setup.outputs.code_change == 'true'
        run: |
          pixi run -e ${{ matrix.environment }} download-data
      - name: Test UI
        if: needs.setup.outputs.code_change == 'true'
        run: |
          pixi run -e ${{ matrix.environment }} test-ui --cov=./holoviews --cov-report=xml
      - name: codecov
        if: needs.setup.outputs.code_change == 'true'
        run: |
          pixi run -e ${{ matrix.environment }} codecov

  core_test_suite:
    name: Core tests on Python ${{ matrix.environment }}, ${{ matrix.os }}
    needs: [pre_commit, setup, pixi_lock]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"]
        environment: ["test-core"]
    timeout-minutes: 120
    env:
      DESC: "Python ${{ matrix.environment }}, ${{ matrix.os }} core tests"
    steps:
      - uses: actions/checkout@v4
        if: needs.setup.outputs.code_change == 'true'
        with:
          fetch-depth: "100"
      - name: Fetch
        if: needs.setup.outputs.code_change == 'true'
        run: git fetch --prune --tags -f
      - uses: actions/download-artifact@v4
        with:
          name: pixi-lock
          path: .
      - uses: prefix-dev/setup-pixi@v0.5.1
        if: needs.setup.outputs.code_change == 'true'
        id: install
        with:
          pixi-version: v0.19.0
          manifest-path: pyproject.toml
          environments: ${{ matrix.environment }}
          # cache: ${{ github.event.inputs.cache || github.event.inputs.cache == '' }}
      - name: Check packages latest version
        if: needs.setup.outputs.code_change == 'true'
        run: |
          pixi run -e ${{ matrix.environment }} check-latest-packages numpy pandas bokeh panel param
      - name: Download data
        if: needs.setup.outputs.code_change == 'true'
        run: |
          pixi run -e ${{ matrix.environment }} download-data
      - name: Test Unit
        if: needs.setup.outputs.code_change == 'true'
        run: |
          pixi run -e ${{ matrix.environment }} test-unit
